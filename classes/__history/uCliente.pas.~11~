unit uCliente;

interface

uses System.SysUtils, System.JSON, REST.Client,
  Xml.XMLDoc, Xml.XMLIntf, System.Classes;

type
  TCliente = class

  protected
    {var protegidos}
  private
    FCep        : string;
    FLogradouro : string;
    FNumero     : string;
    FComplemento: string;
    FBairro     : string;
    FCidade     : string;
    FEstado     : string;
    FPais       : string;
    FEmail: string;
    FCPF: string;
    FIdentidade: string;
    FNome: string;
    FTelefone: string;

    function getUrlViaCep: string;
    function getPasta: string;


  public
    property Cep        : string read FCep          write FCep;
    property Logradouro : string read FLogradouro   write FLogradouro;
    property Numero     : string read FNumero       write FNumero;
    property Complemento: string read FComplemento  write FComplemento;
    property Bairro     : string read FBairro       write FBairro;
    property Cidade     : string read FCidade       write FCidade;
    property Estado     : string read FEstado       write FEstado;
    property Pais       : string read FPais         write FPais;
    property Nome       : string read FNome         write FNome;
    property Identidade : string read FIdentidade   write FIdentidade;
    property CPF        : string read FCPF          write FCPF;
    property Telefone   : string read FTelefone     write FTelefone;
    property Email      : string read FEmail        write FEmail;
    property Pasta      : string read getPasta;

    constructor create;
    destructor destroy;
    procedure buscaCep;
    function geraXML(Sender: TComponent): string;
    function validaCPF(numeroCPF: string): boolean;
    function validaEmail(aStr: string): Boolean;
  end;

implementation

{ TCliente }

function TCliente.validaEmail(aStr: string): Boolean;
begin
 aStr := Trim(UpperCase(aStr));
 if Pos('@', aStr) > 1 then
 begin
   Delete(aStr, 1, pos('@', aStr));
   Result := (Length(aStr) > 0) and (Pos('.', aStr) > 2);
 end
 else
   Result := False;
end;

function TCliente.validaCPF(numeroCPF: string): boolean;
var  dig10, dig11: string;
    s, i, r, peso: integer;
begin

  if ((CPF = '00000000000') or (CPF = '11111111111') or
      (CPF = '22222222222') or (CPF = '33333333333') or
      (CPF = '44444444444') or (CPF = '55555555555') or
      (CPF = '66666666666') or (CPF = '77777777777') or
      (CPF = '88888888888') or (CPF = '99999999999') or
      (length(CPF) <> 11))
     then
  begin
    result := false;
    exit;
  end;

  try
    s := 0;
    peso := 10;
    for i := 1 to 9 do
    begin
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11))
       then dig10 := '0'
    else str(r:1, dig10);

    s := 0;
    peso := 11;
    for i := 1 to 10 do
    begin
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11))
       then dig11 := '0'
    else str(r:1, dig11);

    if ((dig10 = CPF[10]) and (dig11 = CPF[11])) then
      result := true
    else
      result := false;
  except
    result := false;
  end;
end;


procedure TCliente.buscaCep;
var
  RESTResposta  : TRESTResponse;
  RESTRequisicao: TRESTRequest;
  RESTCliente   : TRESTClient;
  ResJSON       : TJSONObject;
begin

  if (FCep = emptyStr) then
  begin
    exit;
  end;

  RESTRequisicao := TRESTRequest.Create(nil);
  RESTCliente := TRESTClient.Create(nil);
  RESTResposta := TRESTResponse.Create(nil);

  RESTRequisicao.Client := RESTCliente;
  RESTRequisicao.Response := RESTResposta;
  RESTCliente.BaseURL := getUrlViaCep;
  RESTRequisicao.Execute;

  ResJSON := RESTResposta.JSONValue as TJSONObject;
  if (Assigned(ResJSON)) and (ResJSON.Count >= 4) then
  begin
    FLogradouro := ResJSON.Values['logradouro'].Value;
    FBairro     := ResJSON.Values['bairro'].Value;
    FCidade     := ResJSON.Values['localidade'].Value;
    FEstado     := ResJSON.Values['uf'].Value;
  end;

  FreeAndNil(RESTRequisicao);
  FreeAndNil(RESTCliente);
  FreeAndNil(RESTResposta);

end;

constructor TCliente.create;
begin
  FLogradouro := '';
  FNumero     := '';
  FComplemento:= '';
  FBairro     := '';
  FCidade     := '';
  FEstado     := '';
  FPais       := '';

end;

destructor TCliente.destroy;
begin
  FreeAndNil(self);
end;

function TCliente.geraXML(Sender: TComponent): string;
var
  Cadastro,
  DadosCliente,
  Endereco    : IXMLNode;
  DocumentoXML: TXMLDocument;
  XML         : string;
begin
  DocumentoXML := TXMLDocument.Create(Sender);

  try
    with DocumentoXML do
    begin
      Active := True;
      Version  := '1.0';
      Encoding := 'UTF-16';
    end;

    Cadastro := DocumentoXML.AddChild('DadosCliente');

    DadosCliente := DocumentoXML.CreateNode('Cliente');
    with DadosCliente do
    begin
      AddChild('Nome').Text       := FNome;
      AddChild('Identidade').Text := FIdentidade;
      AddChild('CPF').Text        := FCPF;
      AddChild('Telefone').Text   := FTelefone;
      AddChild('Email').Text      := FEmail;
    end;

    Endereco := DadosCliente.AddChild('Endereco');

    with Endereco do
    begin
      AddChild('Cep').Text         := FCep;
      AddChild('Logradouro').Text  := FLogradouro;
      AddChild('Numero').Text      := FNumero;
      AddChild('Complemento').Text := FComplemento;
      AddChild('Bairro').Text      := FBairro;
      AddChild('Cidade').Text      := FCidade;
      AddChild('Estado').Text      := FEstado;
      AddChild('Pais').Text        := FPais;
    end;

    Cadastro.ChildNodes.Add(DadosCliente);

    XML := StringReplace(DocumentoXML.XML.Text,'UTF-16','UTF-8',[rfReplaceAll]);
    XML := StringReplace(StringReplace(XML, #10, '', [rfReplaceAll]), #13, '', [rfReplaceAll]);

    if not DirectoryExists(pasta) then
    begin
      CreateDir(pasta);
    end;

    DocumentoXML.SaveToFile(pasta+trim(FNome)+'.xml');
  finally
    freeandnil(DocumentoXML);
  end;
end;

function TCliente.getPasta: string;
begin
  result := ExtractFileDir(GetCurrentDir) + '/xml/';
end;

function TCliente.getUrlViaCep: string;
begin
  result := 'https://viacep.com.br/ws/' + FCep + '/json';
end;


end.
